// üìÑ File: app/api/drugs/check-code/route.ts (UPDATED - Multiple Price Support)
// ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô + ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà

import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { z } from "zod";

// Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
const checkCodeSchema = z.object({
  code: z.string().min(1).max(50)
});

// GET - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö multiple variants)
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const code = searchParams.get('code');
    
    if (!code) {
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤" },
        { status: 400 }
      );
    }

    // Validate input
    const { code: validatedCode } = checkCodeSchema.parse({ code });

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    const existingDrugs = await prisma.drug.findMany({
      where: {
        hospitalDrugCode: validatedCode,
        isActive: true
      },
      select: {
        id: true,
        hospitalDrugCode: true,
        name: true,
        genericName: true,
        dosageForm: true,
        strength: true,
        unit: true,
        category: true,
        packageSize: true,
        pricePerBox: true,
        notes: true,
        createdAt: true,
        stocks: {
          select: {
            department: true,
            totalQuantity: true
          }
        }
      },
      orderBy: [
        { pricePerBox: 'asc' }, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
        { createdAt: 'asc' }    // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
      ]
    });

    // Generate suggestions for similar codes
    const similarCodes = await prisma.drug.findMany({
      where: {
        hospitalDrugCode: {
          contains: validatedCode.slice(0, 3), // ‡πÉ‡∏ä‡πâ 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
          mode: 'insensitive'
        },
        isActive: true,
        NOT: {
          hospitalDrugCode: validatedCode
        }
      },
      select: {
        hospitalDrugCode: true,
        name: true,
        pricePerBox: true
      },
      take: 5,
      orderBy: {
        hospitalDrugCode: 'asc'
      }
    });

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏¢‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "duplicate" ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    if (existingDrugs.length > 0) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      const priceRange = {
        min: Math.min(...existingDrugs.map(d => d.pricePerBox)),
        max: Math.max(...existingDrugs.map(d => d.pricePerBox)),
        count: existingDrugs.length
      };

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-fill
      const templateDrug = existingDrugs[0]; // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î) ‡πÄ‡∏õ‡πá‡∏ô template

      return NextResponse.json({
        available: true, // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å false ‡πÄ‡∏õ‡πá‡∏ô true (‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏î‡πâ)
        exists: true,    // ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏£‡∏¥‡∏á
        canCreateVariant: true, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡πÉ‡∏´‡∏°‡πà
        drugs: existingDrugs,
        templateDrug, // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-fill
        priceRange,
        suggestions: similarCodes,
        message: `‡∏£‡∏´‡∏±‡∏™ "${validatedCode}" ‡∏°‡∏µ ${existingDrugs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ø${priceRange.min.toLocaleString()}-${priceRange.max.toLocaleString()})`
      });
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤‡πÄ‡∏•‡∏¢ = ‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà
    return NextResponse.json({
      available: true,
      exists: false,
      canCreateVariant: false,
      drugs: [],
      templateDrug: null,
      priceRange: null,
      suggestions: similarCodes,
      message: `‡∏£‡∏´‡∏±‡∏™ "${validatedCode}" ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà)`
    });

  } catch (error) {
    console.error('Check code error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤" },
      { status: 500 }
    );
  }
}

// POST - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bulk import) - Updated
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { codes } = body;

    if (!Array.isArray(codes)) {
      return NextResponse.json(
        { error: "codes ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array" },
        { status: 400 }
      );
    }

    // Validate all codes
    const validatedCodes = codes.map(code => 
      checkCodeSchema.parse({ code }).code
    );

    // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤)
    const existingDrugs = await prisma.drug.findMany({
      where: {
        hospitalDrugCode: {
          in: validatedCodes
        },
        isActive: true
      },
      select: {
        hospitalDrugCode: true,
        name: true,
        genericName: true,
        category: true,
        pricePerBox: true,
        createdAt: true
      },
      orderBy: [
        { hospitalDrugCode: 'asc' },
        { pricePerBox: 'asc' }
      ]
    });

    // Group by hospital drug code
    const drugsByCode = existingDrugs.reduce((acc, drug) => {
      if (!acc[drug.hospitalDrugCode]) {
        acc[drug.hospitalDrugCode] = [];
      }
      acc[drug.hospitalDrugCode].push(drug);
      return acc;
    }, {} as Record<string, typeof existingDrugs>);

    const results = validatedCodes.map(code => {
      const variants = drugsByCode[code] || [];
      return {
        code,
        available: true, // ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
        exists: variants.length > 0,
        canCreateVariant: variants.length > 0,
        variantCount: variants.length,
        drugs: variants,
        priceRange: variants.length > 0 ? {
          min: Math.min(...variants.map(d => d.pricePerBox)),
          max: Math.max(...variants.map(d => d.pricePerBox)),
          count: variants.length
        } : null
      };
    });

    return NextResponse.json({
      success: true,
      results,
      summary: {
        total: validatedCodes.length,
        newCodes: results.filter(r => !r.exists).length,
        existingCodes: results.filter(r => r.exists).length,
        totalVariants: results.reduce((sum, r) => sum + r.variantCount, 0)
      }
    });

  } catch (error) {
    console.error('Bulk check codes error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤" },
      { status: 500 }
    );
  }
}